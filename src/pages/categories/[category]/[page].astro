
---
import type { GetStaticPaths } from "astro";
import { SITE } from "@/lib/config";
import { articlesHandler } from "@/lib/handlers/articles";
import { categoriesHandler } from "@/lib/handlers/categories";
import ListLayout from "@/layouts/list.astro";
import Pagination from "@/components/shared/pagination.astro";
import WideCard from "@/components/cards/wideCard.astro";
import { getEntry } from "astro:content";

export const getStaticPaths = (async ({ paginate }) => {
  const allCategories = categoriesHandler.allCategories();
  const allArticles = articlesHandler.allArticles();

  return allCategories.flatMap((category) => {
    const filtered = allArticles.filter(
      (article) => article.data.category.id === category.id
    );
    return paginate(filtered, {
      params: { category: category.id },
      pageSize: SITE.postsPerPage,
    });
  });
}) satisfies GetStaticPaths;

const { page } = Astro.props;
const params = Astro.params;
const articles = page.data;
const pathname = new URL(Astro.request.url).pathname.split("/");
const firstPath = pathname[1];

const entry = await getEntry("views", "categories");
if (!entry) {
  return Astro.redirect("/404");
}
---

<ListLayout header={params.category} entry={entry}>
  {articles.length > 0 ? (
    <>
      <ul class="flex flex-col gap-2 flex-1">
        {articles.map((article) => (
          <WideCard
            article={article}
            isLast={articles.lastIndexOf(article) === articles.length - 1}
          />
        ))}
      </ul>

      {page.lastPage > 1 && (
        <Pagination
          length={page.lastPage}
          currentUrl={page.url.current}
          currentPage={page.currentPage}
          firstUrl={`/${firstPath}`}
          prevUrl={page.url.prev}
          nextUrl={page.url.next}
          lastUrl={`/${firstPath}/${page.lastPage}`}
        />
      )}
    </>
  ) : (
    <p class="col-span-3 text-center py-8 text-base-content/70">
      Weâ€™re currently working to add events for this category. Check back soon!
    </p>
  )}
</ListLayout>
